generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL") // uses connection pooling

}

model Admin {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  createdAt DateTime @default(now())
}

model Blogs {
  id              Int      @id @default(autoincrement())
  title           String
  description     String   @db.Text
  image           String?
  slug            String   @unique
  tag             Json?
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  schema     String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ContactForm {
  id              Int      @id @default(autoincrement())
  name           String
  phone         String 
  email          String?
  services       String?   
  message        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model Services {
  id              Int        @id @default(autoincrement())
  title           String
  description     String     @db.Text
  image           String?
  bannerImage     String?
  slug            String     @unique
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  schema     String   @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  faqs            ServicesFaq[] @relation("ServiceFAQs")
}

model ServicesFaq {
  id         Int      @id @default(autoincrement())
  serviceId  Int
  question   String
  answer     String   @db.Text
  service    Services @relation("ServiceFAQs", fields: [serviceId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}

model Specialized  {
  id              Int        @id @default(autoincrement())
  title           String
  description     String     @db.Text
  image           String?
  bannerImage     String?
  slug            String     @unique
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  schema     String   @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  faqs            SpecializedFaq[] @relation("SpecializedFAQs")
}

model SpecializedFaq {
  id         Int      @id @default(autoincrement())
  specializedId  Int
  question   String
  answer     String   @db.Text
  specialized    Specialized @relation("SpecializedFAQs", fields: [specializedId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}

model JobPost {
  id              Int        @id @default(autoincrement())
  title           String
  description     String     @db.Text
  image           String?
  bannerImage     String?
  slug            String     @unique
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  jobApplied      JobApplied[]
}

model JobApplied {
  id          Int      @id @default(autoincrement())
  jobId       Int
  name        String
  email       String
  phone       String
  address     String
  cvUpload    String
  createdAt   DateTime @default(now())
  jobPost     JobPost  @relation(fields: [jobId], references: [id])
  @@index([jobId])  // Optional: index for the jobId field to improve query performance
  
}
model Projects  {
  id              Int        @id @default(autoincrement())
  title           String
  description     String     @db.Text
  image           String?
  url             String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
}


model SEO {
  id               Int      @id @default(autoincrement())
  pagename         String?
  title            String?
  description      String?
  schema           String     @db.Text
  canonical        String?
  og_title         String?   // Open Graph title
  og_description   String?   // Open Graph description
  og_url           String?   // Open Graph URL
  og_image         String?   // Open Graph image URL
  og_type          String?    // Open Graph type (e.g., article, website, etc.)
  og_site_name     String?    // Open Graph site name
  og_locale        String?    // Open Graph locale (e.g., en_US)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

}
